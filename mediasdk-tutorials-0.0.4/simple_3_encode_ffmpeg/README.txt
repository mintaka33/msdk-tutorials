1. Introduction
    This example uses the basic encode code and combines with the ffmpeg libraries to encode and mux the video to the standard container: mp4, mkv and mpeg2. To build the binary of this example, the FFmpeg Dev libraries must be installed first.

2. Install the FFmpeg Dev library.
    2.1 Install on Windows
        2.1.1 Open a browser and go to https://ffmpeg.zeranoe.com/builds/
        2.1.2 Select "Version" as version you want; "Architecture" as "Windows 64-bit"; "Linking" as "Dev"; click the "Download Build" button.
        2.1.2 Unzip the Dev package to a local directory.
        2.1.3 Select "Version" the same as in 2.1.2; "Architecture" as "Windows 64-bit"; "Linking" as "Shared"; click the "Download Build" button.
        2.1.4 Unzip the Shared package to a local directory.
        2.1.5 Add the environment variables, open "Advanced system settings" and click "Environment Variables..." button
            i. Add "FFMPEG_ROOT" with the directory to the unzip the ffmpeg Dev package.
            ii. Add the directory "bin" under the unzipped the ffmpeg Shared package directory to the "PATH"
        2.1.6 Enable the audio path by adding the variable "DECODE_AUDIO" in the compiler preprocessor definition.
        2.1.7 Run the solution build.
    2.2 Install on Linux:
        2.2.1 Starts from the Generic Compilation Guide of FFmpeg(https://trac.ffmpeg.org/wiki/CompilationGuide), in the guide, select the Linux and the distribution you are working on, for example, the Ubuntu build instructions(https://trac.ffmpeg.org/wiki/CompilationGuide/Ubuntu); then following the specific instruction page to build the required FFmpeg modules..
        2.2.2 After building the requested FFMpeg modules. Starts building the shared FFmpeg libraries. To build the shared library, a minor change must be done to the original build command: When configuring the final build, please append the following arguments to the original "./configure..." command: "--enable-shared --enable-pic --extra-cflags=-fPIC", for example, 
>PATH="$HOME/bin:$PATH" PKG_CONFIG_PATH="$HOME/ffmpeg_build/lib/pkgconfig" ./configure \
  --prefix="$HOME/ffmpeg_build" \
  --pkg-config-flags="--static" \
  --extra-cflags="-I$HOME/ffmpeg_build/include" \
  --extra-ldflags="-L$HOME/ffmpeg_build/lib" \
  --extra-libs=-lpthread \
  --bindir="$HOME/bin" \
  --enable-gpl \
  --enable-libass \
  --enable-libfdk-aac \
  --enable-libfreetype \
  --enable-libmp3lame \
  --enable-libopus \
  --enable-libtheora \
  --enable-libvorbis \
  --enable-libvpx \
  --enable-libx264 \
  --enable-libx265 \
  --enable-nonfree \
  --enable-shared \
  --enable-pic \
  --extra-cflags=-fPIC
        2.2.3 In the "CFLAG" of the Makefile, enable/disable "-DDEBUG" flag for debug purpose; enable/disable "-DENCODE_AUDIO" to include the audio encoder which will compress the raw audio from file "Audio.dat" to the output video container.
        2.2.4 Run normal "make" command to build

3. To run the example, use the following command:
~\_build\x64\Debug>simple_encode_ffmpeg.exe -hw -g 320x180 -b 20000 -f 24/1 out.yuv out.mp4
[mp4 @ 0000022a00866680] track 1: codec frame size is not set
Output #0, mp4, to 'out.mp4':
  Metadata:
    encoder         : Lavf57.83.100
    Stream #0:0: Video: h264 (avc1 / 0x31637661), none, 320x180, q=2-31, 20000 kb/s, 90k tbn
    Stream #0:1: Audio: aac (mp4a / 0x6134706D), 44100 Hz, stereo, fltp, 64 kb/s
Frame number: 14315
Execution time: 49.27 s (290.53 fps)
[aac @ 0000022a008675e0] Qavg: 317.989

NOTE: If the audio channel was enabled during the build, the program is looking for "Audio.dat" file as the audio input, please make sure this file was generated by the "sample_decode_ffmpeg".

    NOTE:
        1) Use "-sw" for the software mode.
        2) The default mode is "-auto"
        3) The output file can be empty so the example will run the encode only; although the ffmpeg functions will be disable.

4. Design
    The sample code is modified base on the original tutorial simple_encode. The call to the FFMpeg integration is added to the original source code, the modified area is wrapped by the following comment line:
    // =========== ffmpeg splitter integration ============
    ......
 
    // =========== ffmpeg splitter integration end ============
    The API to the FFmpeg integration is defined and implemented in the files ffmpeg_utils.h, ffmpeg_utils.cpp. The modified area shows the difference from the original simple_encode source code. It can be see the ffmpeg mux works as the bit stream writer in the original code.
    The structure muxControl keeps the control parameters of the mux process; the function openMuxControl initializes and configures the muxControl structure, the structure is then used for the encoding and mux process; during the encoding, the function ffmpegWriteFrame() writes the encoded stream into the output container via the FFmpeg muxer; finally the function closeMuxControl() releases the system resources.

    It has the following steps:
    1) Parse the arguments from the command line, then open the file I/O objects. If the audio path is enabled, the audio data file will be assumed in the local directory.
    2) Check the output extension for the output container format, current the file extension .mkv, .mp4, .mpeg, .mpg and .ts are supported. The mux open function is called to open the output container file and configure the mux process.
    3) Create the Media SDK session, and then create the Media SDK encoder object.
    4) Configure the video parameters based on the user input, then validate the video parameters from the encoder o
bject.
    5) Allocate the surfaces(video frame working memory) with the system memory required by the encoder.
    6) Initialize the encoder
    7) Allocate the bit stream buffer for the encoder output buffer.
    8) Start the encoding loop
        Stage1: Main encoding loop, to encode from the input bit stream, and write the output stream to the container file.
        Stage2: Retrieve the buffered encoded frames; after the end of the input stream, flush the cached stream data from the surface pool.
    9) Clean up the resources and close the session.

5. Reference:
    The latest article: https://software.intel.com/en-us/articles/quick-start-on-integrating-ffmpeg-libraries
    The previous article: https://software.intel.com/en-us/articles/integrating-intel-media-sdk-with-ffmpeg-for-muxdemuxing-and-audio-encodedecode-usages

